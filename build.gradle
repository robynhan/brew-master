apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'maven'

apply from: 'config/scripts/coverage.gradle'
apply from: 'config/scripts/idea.gradle'

group = 'org.robynhan.com'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "http://nexus.sluff.io/content/repositories/snapshots"
    }
}

project.ext {
    guavaVersion = '18.0'
    guiceVersion = '4.0'
    slf4jVersion = '1.7.12'
    junitVersion = '4.12'
    mockitoVersion = '1.10.19'
    logbackVersion = '1.1.3'
    cucumberVersion = '1.2.2'
    httpcomponentsVersion = '4.5.2'
    jsonpathVersion = '2.2.0'
    fastjsonVersion = '1.2.20'
    springBootVersion = '1.4.0.RELEASE'
    findbugsAnnotationsVersion = '1.3.2-201002241900'
    mysqlConnectorVersion = '5.1.36'
    h2Version = '1.4.191'
    flywayVersion = '4.0.3'
    commonIoVersion = '2.4'
    jerseyMultipartVersion = '2.24'
}

project.configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

project.dependencies {
    compile(
            "com.google.guava:guava:$guavaVersion",
            "com.google.inject:guice:$guiceVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.apache.httpcomponents:httpclient:$httpcomponentsVersion",
            "org.apache.httpcomponents:httpmime:$httpcomponentsVersion",
            "com.jayway.jsonpath:json-path:$jsonpathVersion",
            "com.alibaba:fastjson:$fastjsonVersion",
            "org.mockito:mockito-core:$mockitoVersion",
            "info.cukes:cucumber-java:$cucumberVersion",
            "com.kenai.nbpwr:edu-umd-cs-findbugs-annotations:$findbugsAnnotationsVersion",
            "org.springframework.boot:spring-boot-starter-jersey:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
            "commons-io:commons-io:$commonIoVersion",
    )

    runtime(
            "ch.qos.logback:logback-classic:$logbackVersion",
            "com.h2database:h2:$h2Version",
            "mysql:mysql-connector-java:$mysqlConnectorVersion",
            "org.flywaydb:flyway-core:$flywayVersion",
    )

    testCompile(
            "junit:junit:$junitVersion",
            "org.springframework.boot:spring-boot-starter-test:$springBootVersion",
    )
}

checkstyle {
    configFile = file("$project.projectDir/config/checkstyle/sun_checks.xml")
    toolVersion = '7.2'
}

checkstyleTest {
    enabled = false
}

findbugs {
    toolVersion = "3.0.1"
}

findbugsTest {
    enabled = false
}

jacoco {
    toolVersion = "0.7.5.201505241946"
}

coverage {
    excludePackages = [
    ]
    excludeClasses = [
            "org.robynhan.com.brewmaster.Constants",
            "org.robynhan.com.brewmaster.ServiceInvoker",
    ]
}

// check.dependsOn "coverageCheck"

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-Xlint:deprecation"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

project.uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://nexus.sluff.io/content/repositories/" +
                    "${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}") {
                authentication(userName: "deployment", password: "groot")
            }
            pom.version = "${project.version}"
            pom.artifactId = "${project.name}"
            pom.groupId = "${project.group}"
        }
    }
}

project.jar {
    manifest {
        attributes 'Package': "org.robynhan.com",
                'Implementation-Title': "brew-master",
                'Implementation-Version': "1.0.0-SNAPSHOT",
                'Implementation-Vendor': 'robynhan',
                'Built-By': 'robynhan',
                'Built-Date': new Date().getDateTimeString(),
                'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: Javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}